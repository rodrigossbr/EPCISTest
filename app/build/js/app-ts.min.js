var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var appConfig = {
    appName: "EPCISTests",
    version: "0.0.1",
    defaultRoute: "/",
    rootServiceRoute: "http://localhost:41000/",
    serviceUrls: function () {
        return {
            threadTests: {
                setThreads: appConfig.rootServiceRoute + "api/threads/setThreads",
                getThreadsStatus: appConfig.rootServiceRoute + "api/threads/getThreadsStatus"
            }
        };
    }
};
/// <reference path="_all.ts" />
var EPCISTests;
(function (EPCISTests) {
    'use strict';
    var modules = new Array();
    modules.push('ngRoute');
    modules.push('ngAnimate');
    modules.push('ngMessages');
    modules.push('ngMaterial');
    modules.push('ngSanitize');
    modules.push('ui.tinymce');
    modules.push('toastr');
    modules.push('chart.js');
    angular.module(appConfig.appName, modules);
})(EPCISTests || (EPCISTests = {}));
/// <reference path="_all.ts" />
var EPCISTests;
(function (EPCISTests) {
    'use strict';
    function config($routeProvider) {
        $routeProvider
            .when("/", {
            templateUrl: "app/views/thread-tests/thread-tests.html",
            controller: "ThreadsTestsController",
            controllerAs: "vm"
        })
            .otherwise({
            templateUrl: "app/views/shared/404.html",
            controller: "SharedController",
            controllerAs: "vm"
        });
        ;
    }
    config.$inject = ['$routeProvider'];
    angular.module(appConfig.appName).config(config);
})(EPCISTests || (EPCISTests = {}));
/// <reference path="_all.ts" />
var EPCISTests;
(function (EPCISTests) {
    'use strict';
    function config($mdThemingProvider, ChartJsProvider) {
        $mdThemingProvider.theme('default')
            .dark()
            .primaryPalette('blue-grey')
            .accentPalette('blue');
        ChartJsProvider.setOptions({ colors: ['#803690', '#00ADF9', '#DCDCDC', '#46BFBD', '#FDB45C', '#949FB1', '#4D5360'] });
    }
    config.$inject = ['$mdThemingProvider', 'ChartJsProvider'];
    angular.module(appConfig.appName).config(config);
    function start($rootScope) {
        $rootScope.header = {
            headers: {
                "Content-Type": "application/xml",
                "Access-Control-Allow-Origin": "*"
            }
        };
        // Aplica tootips sempre visiveis nos graficos
        Chart.pluginService.register({
            beforeRender: function (chart) {
                if (chart.config.options.showAllTooltips) {
                    chart.pluginTooltips = [];
                    chart.config.data.datasets.forEach(function (dataset, i) {
                        chart.getDatasetMeta(i).data.forEach(function (sector, j) {
                            chart.pluginTooltips.push(new Chart.Tooltip({
                                _chart: chart.chart,
                                _chartInstance: chart,
                                _data: chart.data,
                                _options: chart.options.tooltips,
                                _active: [sector]
                            }, chart));
                        });
                    });
                    chart.options.tooltips.enabled = false;
                }
            },
            afterDraw: function (chart, easing) {
                if (chart.config.options.showAllTooltips) {
                    if (!chart.allTooltipsOnce) {
                        if (easing !== 1)
                            return;
                        chart.allTooltipsOnce = true;
                    }
                    chart.options.tooltips.enabled = true;
                    Chart.helpers.each(chart.pluginTooltips, function (tooltip) {
                        tooltip.initialize();
                        tooltip.update();
                        tooltip.pivot();
                        tooltip.transition(easing).draw();
                    });
                    chart.options.tooltips.enabled = false;
                }
            }
        });
    }
    start.$inject = ['$rootScope'];
    angular.module(appConfig.appName).run(start);
})(EPCISTests || (EPCISTests = {}));
/// <reference path="../configs/_all.ts" />
/// <reference path="../configs/_all.ts" />
/// <reference path="../configs/_all.ts" />
/// <reference path="../configs/_all.ts" />
/// <reference path="../configs/_all.ts" />
/// <reference path="../configs/_all.ts" />
/// <reference path="../configs/_all.ts" />
/// <reference path="../../configs/_all.ts" />
/// <reference path="../../configs/_all.ts" />
var EPCISTests;
(function (EPCISTests) {
    var AppServiceBase = (function () {
        function AppServiceBase($rootScope, $http) {
            this.rootScope = $rootScope;
            this.httpService = $http;
        }
        AppServiceBase.prototype.handlerResponded = function (response, params) {
            response.data.requestParams = params;
            return response.data;
        };
        AppServiceBase.prototype.getByIdFromUrl = function (url, id) {
            var _this = this;
            var result = this.httpService.get(url + '/' + id, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, id); });
            return result;
        };
        AppServiceBase.prototype.listAllFromUrl = function (url) {
            var _this = this;
            var result = this.httpService.get(url, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.listAllByParamFromUrl = function (url, param) {
            var _this = this;
            var result = this.httpService.get(url + "/" + param, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.createByUrl = function (url, obj) {
            var _this = this;
            var result = this.httpService.put(url, obj, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.updateByUrl = function (url, obj) {
            var _this = this;
            var result = this.httpService.post(url, obj, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.removeByUrl = function (url, id) {
            var _this = this;
            var result = this.httpService.delete(url + "/" + id, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.getFromUrl = function (url, params) {
            var _this = this;
            var result = this.httpService.get(url + (params ? params : ""), this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, (params ? params : "")); });
            return result;
        };
        AppServiceBase.prototype.postFromUrl = function (url, obj, header) {
            var _this = this;
            if (!header)
                header = this.rootScope.header;
            var result = this.httpService.post(url, obj, header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.putFromUrl = function (url, obj, header) {
            var _this = this;
            if (!header)
                header = this.rootScope.header;
            var result = this.httpService.put(url, obj, header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.deleteFromUrl = function (url, params) {
            var _this = this;
            var result = this.httpService.delete(url + (params ? params : ""), this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, (params ? params : "")); });
            return result;
        };
        AppServiceBase.$inject = ['$rootScope', '$http'];
        return AppServiceBase;
    }());
    EPCISTests.AppServiceBase = AppServiceBase;
})(EPCISTests || (EPCISTests = {}));
/// <reference path="../configs/_all.ts" />
var EPCISTests;
(function (EPCISTests) {
    var ThreadsService = (function (_super) {
        __extends(ThreadsService, _super);
        function ThreadsService() {
            _super.apply(this, arguments);
        }
        ThreadsService.prototype.setThreads = function (numThreads) {
            return _super.prototype.getFromUrl.call(this, appConfig.serviceUrls().threadTests.setThreads, numThreads);
        };
        ThreadsService.prototype.getThreadsStatus = function () {
            return _super.prototype.getFromUrl.call(this, appConfig.serviceUrls().threadTests.getThreadsStatus);
        };
        ThreadsService.prototype.executeService = function (url, requestType, params) {
            switch (requestType) {
                case "get":
                    return _super.prototype.getFromUrl.call(this, url);
                case "post":
                    return _super.prototype.postFromUrl.call(this, url, params);
                case "put":
                    return _super.prototype.putFromUrl.call(this, url, params);
                case "delete":
                    return _super.prototype.deleteFromUrl.call(this, url, params);
            }
            return _super.prototype.getFromUrl.call(this, url);
        };
        return ThreadsService;
    }(EPCISTests.AppServiceBase));
    EPCISTests.ThreadsService = ThreadsService;
    angular.module(appConfig.appName).service("ThreadsService", ThreadsService);
})(EPCISTests || (EPCISTests = {}));
/// <reference path="../../configs/_all.ts" />
var EPCISTests;
(function (EPCISTests) {
    var ThreadsTestsController = (function () {
        function ThreadsTestsController($location, threadsService, $rootScope) {
            this.$location = $location;
            this.threadsService = threadsService;
            this.$rootScope = $rootScope;
            this.threadsQtd = 1;
            this.isRun = false;
            this.requestType = "get";
            this.contentType = "application/xml";
            this.chartData = new EPCISTests.ChartData();
            this.mostrarLabels = false;
            this.urlEpcis = "http://192.168.0.102:8080/epcis-webadapter-0.1.0/rest/1/eventquery/result?epc=urn:epc:id:sgtin:*";
        }
        ThreadsTestsController.prototype.play = function () {
            this.isRun = true;
            this.$rootScope.header.headers = {
                "Content-Type": this.contentType + "; charset=UTF-8",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "*"
            };
            this.refreshThreads();
        };
        ThreadsTestsController.prototype.stop = function () {
            this.isRun = false;
            this.chartData.reset();
        };
        ThreadsTestsController.prototype.refreshThreads = function () {
            if (!this.isRun)
                return;
            this.chartData.reset();
            this.startData = new Date();
            for (var i = 0; i < this.threadsQtd; i++) {
                this.executeService(this.urlEpcis);
            }
        };
        ThreadsTestsController.prototype.aplicarOpcoes = function () {
            this.mostrarLabels = !this.mostrarLabels;
            this.optionToRender = {
                showAllTooltips: this.mostrarLabels
            };
        };
        ThreadsTestsController.prototype.executeService = function (url) {
            var _this = this;
            var tInfo = new EPCISTests.ThreadInfo();
            tInfo.startDate = new Date();
            this.threadsService.executeService(url, this.requestType)
                .then(function (data) {
                tInfo.stopDate = new Date();
                _this.stopData = new Date();
                _this.chartData.addThreadInfo(tInfo);
            })
                .catch(function (response) {
                tInfo.stopDate = new Date();
                _this.stopData = new Date();
                _this.chartData.addThreadInfo(tInfo);
            });
        };
        ThreadsTestsController.prototype.getStartTime = function () {
            if (this.startData) {
                return this.startData.getHours() + ":" + this.startData.getMinutes() + ":" + this.startData.getSeconds() + ":" + this.startData.getMilliseconds();
            }
            return "";
        };
        ThreadsTestsController.prototype.getStopTime = function () {
            if (this.stopData) {
                return this.stopData.getHours() + ":" + this.stopData.getMinutes() + ":" + this.stopData.getSeconds() + ":" + this.stopData.getMilliseconds();
            }
            return "";
        };
        ThreadsTestsController.$inject = ['$location', 'ThreadsService', '$rootScope'];
        return ThreadsTestsController;
    }());
    EPCISTests.ThreadsTestsController = ThreadsTestsController;
    angular.module(appConfig.appName).controller('ThreadsTestsController', ThreadsTestsController);
})(EPCISTests || (EPCISTests = {}));
/// <reference path="../../configs/_all.ts" />
var EPCISTests;
(function (EPCISTests) {
    var SharedController = (function () {
        function SharedController($location) {
            this.$location = $location;
        }
        SharedController.$inject = ['$location'];
        return SharedController;
    }());
    EPCISTests.SharedController = SharedController;
    angular.module(appConfig.appName).controller('SharedController', SharedController);
})(EPCISTests || (EPCISTests = {}));
/// <reference path="../../configs/_all.ts" />
var EPCISTests;
(function (EPCISTests) {
    var ThreadInfo = (function () {
        function ThreadInfo() {
        }
        Object.defineProperty(ThreadInfo.prototype, "timeInSeconds", {
            get: function () {
                return this.timeInMilliSeconds / 1000;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreadInfo.prototype, "timeInMilliSeconds", {
            get: function () {
                var stopDate = this.stopDate;
                if (!stopDate) {
                    stopDate = new Date();
                }
                return Math.abs(stopDate.getTime() - this.startDate.getTime());
            },
            enumerable: true,
            configurable: true
        });
        return ThreadInfo;
    }());
    EPCISTests.ThreadInfo = ThreadInfo;
})(EPCISTests || (EPCISTests = {}));
/// <reference path="../../configs/_all.ts" />
var EPCISTests;
(function (EPCISTests) {
    var ChartData = (function () {
        function ChartData() {
            this.threads = new Array();
            this.labels = new Array();
            this.data = new Array();
            this.dataSetOverrride = [
                {
                    label: "Start",
                    borderWidth: 1,
                    type: 'line'
                },
                {
                    label: "Stop",
                    borderWidth: 1,
                    type: 'line'
                }
            ];
            this.refresh();
        }
        ChartData.prototype.reset = function () {
            this.threads = new Array();
            this.labels = new Array();
            this.data = new Array();
        };
        ChartData.prototype.refresh = function () {
            var _this = this;
            this.threads.forEach(function (t) {
                var lbl = _this.labels.filter(function (l) { return l == t.name; });
                if (lbl.length == 0) {
                    _this.labels.push(t.name);
                    _this.data.push(t.timeInMilliSeconds);
                    console.log("-------------");
                    console.log(t.startDate.getHours() + ":" + t.startDate.getMinutes() + ":" + t.startDate.getSeconds() + ":" + t.startDate.getMilliseconds());
                    console.log(t.stopDate.getHours() + ":" + t.stopDate.getMinutes() + ":" + t.stopDate.getSeconds() + ":" + t.stopDate.getMilliseconds());
                }
            });
        };
        ChartData.prototype.addThreadInfo = function (threadInfo) {
            threadInfo.name = "T" + this.threads.length;
            this.threads.push(threadInfo);
            this.refresh();
        };
        return ChartData;
    }());
    EPCISTests.ChartData = ChartData;
})(EPCISTests || (EPCISTests = {}));
/// <reference path="../../typings/angularjs/angular.d.ts" />
/// <reference path="../../typings/angularjs/angular-route.d.ts" />
/// <reference path="../../typings/angular-ui-bootstrap/angular-ui-bootstrap.d.ts" />
/// <reference path="../../typings/ui-grid/ui-grid.d.ts" />
/// <reference path="../../typings/toastr/toastr.d.ts" />
/// <reference path="../../typings/chart.js/chart.js.d.ts" />
/// <reference path="AppConfig.ts" />
/// <reference path="Modules.ts" />
/// <reference path="Routes.ts" />
/// <reference path="Startup.ts" />
/// <reference path="../contracts/IRootScope.ts" />
/// <reference path="../contracts/IHttpService.ts" />
/// <reference path="../contracts/ILocationService.ts" />
/// <reference path="../contracts/IModalService.ts" />
/// <reference path="../contracts/IModalServiceInstance.ts" />
/// <reference path="../contracts/IRouteParamsService.ts" />
/// <reference path="../contracts/ITimeoutService.ts" />
/// <reference path="../services/app-service-base/IAppService.ts" />
/// <reference path="../services/app-service-base/AppServiceBase.ts" />
/// <reference path="../services/ThreadsService.ts" />
/// <reference path="../controllers/threads/ThreadsTestsController.ts" />
/// <reference path="../controllers/shareds/SharedController.ts" />
/// <reference path="../models/api-models/ThreadInfo.ts" />
/// <reference path="../models/app-models/ChartData.ts" /> 
